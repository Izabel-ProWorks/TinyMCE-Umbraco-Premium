// This file is auto-generated by @hey-api/openapi-ts

export const ProblemDetailsSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        title: {
            type: 'string',
            nullable: true
        },
        status: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        detail: {
            type: 'string',
            nullable: true
        },
        instance: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: {}
} as const;

export const RichTextEditorCommandSchema = {
    required: ['alias', 'mode', 'name'],
    type: 'object',
    properties: {
        alias: {
            minLength: 1,
            type: 'string'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        mode: {
            '$ref': '#/components/schemas/RichTextEditorCommandModeModel'
        }
    },
    additionalProperties: false
} as const;

export const RichTextEditorCommandModeModelSchema = {
    enum: ['Insert', 'Selection', 'All'],
    type: 'string'
} as const;

export const RichTextEditorSettingsSchema = {
    required: ['commands', 'customConfig', 'invalidElements', 'plugins', 'validElements'],
    type: 'object',
    properties: {
        commands: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/RichTextEditorCommand'
                    }
                ]
            }
        },
        plugins: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        customConfig: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        validElements: {
            type: 'string',
            default: '+a[id|style|rel|data-id|data-udi|rev|charset|hreflang|dir|lang|tabindex|accesskey|type|name|href|target|title|class|onfocus|onblur|onclick|ondblclick|onmousedown|onmouseup|onmouseover|onmousemove|onmouseout|onkeypress|onkeydown|onkeyup],-strong/-b[class|style],-em/-i[class|style],-strike[class|style],-s[class|style],-u[class|style],#p[id|style|dir|class|align],-ol[class|reversed|start|style|type],-ul[class|style],-li[class|style],br[class],img[id|dir|lang|longdesc|usemap|style|class|src|onmouseover|onmouseout|border|alt=|title|hspace|vspace|width|height|align|umbracoorgwidth|umbracoorgheight|onresize|onresizestart|onresizeend|rel|data-id],-sub[style|class],-sup[style|class],-blockquote[dir|style|class],-table[border=0|cellspacing|cellpadding|width|height|class|align|summary|style|dir|id|lang|bgcolor|background|bordercolor],-tr[id|lang|dir|class|rowspan|width|height|align|valign|style|bgcolor|background|bordercolor],tbody[id|class],thead[id|class],tfoot[id|class],#td[id|lang|dir|class|colspan|rowspan|width|height|align|valign|style|bgcolor|background|bordercolor|scope],-th[id|lang|dir|class|colspan|rowspan|width|height|align|valign|style|scope],caption[id|lang|dir|class|style],-div[id|dir|class|align|style],-span[class|align|style],-pre[class|align|style],address[class|align|style],-h1[id|dir|class|align|style],-h2[id|dir|class|align|style],-h3[id|dir|class|align|style],-h4[id|dir|class|align|style],-h5[id|dir|class|align|style],-h6[id|style|dir|class|align|style],hr[class|style],small[class|style],dd[id|class|title|style|dir|lang],dl[id|class|title|style|dir|lang],dt[id|class|title|style|dir|lang],object[class|id|width|height|codebase|*],param[name|value|_value|class],embed[type|width|height|src|class|*],map[name|class],area[shape|coords|href|alt|target|class],bdo[class],button[class],iframe[*],figure,figcaption,cite,video[*],audio[*],picture[*],source[*],canvas[*],code'
        },
        invalidElements: {
            type: 'string',
            default: 'font'
        },
        cloudApiKey: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const TinyMceConfigResponseModelSchema = {
    type: 'object',
    properties: {
        richTextEditor: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/RichTextEditorSettings'
                }
            ],
            nullable: true
        },
        config: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/TinyMceSettings'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const TinyMceSettingsSchema = {
    required: ['apikey', 'customConfig', 'openAiApikey', 'pluginsToExclude'],
    type: 'object',
    properties: {
        apikey: {
            type: 'string'
        },
        openAiApikey: {
            type: 'string'
        },
        pluginsToExclude: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        customConfig: {
            type: 'object',
            additionalProperties: {}
        }
    },
    additionalProperties: false
} as const;